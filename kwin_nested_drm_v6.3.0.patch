diff --git a/src/backends/drm/drm_backend.cpp b/src/backends/drm/drm_backend.cpp
index 7132793e9d..02919333a9 100644
--- a/src/backends/drm/drm_backend.cpp
+++ b/src/backends/drm/drm_backend.cpp
@@ -7,8 +7,8 @@
     SPDX-License-Identifier: GPL-2.0-or-later
 */
 #include "drm_backend.h"
-
 #include "config-kwin.h"
+#include <fcntl.h>
 
 #include "backends/libinput/libinputbackend.h"
 #include "core/outputconfiguration.h"
@@ -207,7 +207,8 @@ void DrmBackend::handleUdevEvent()
 
 DrmGpu *DrmBackend::addGpu(const QString &fileName)
 {
-    int fd = m_session->openRestricted(fileName);
+    int fd = open(fileName.toStdString().c_str(), 0);
+    fd = fcntl(fd, F_DUPFD_CLOEXEC, 0);
     if (fd < 0) {
         qCWarning(KWIN_DRM) << "failed to open drm device at" << fileName;
         return nullptr;
diff --git a/src/backends/drm/drm_backend.h b/src/backends/drm/drm_backend.h
index 91c1c8e9c1..8be92b9e13 100644
--- a/src/backends/drm/drm_backend.h
+++ b/src/backends/drm/drm_backend.h
@@ -49,6 +49,11 @@ public:
     Outputs outputs() const override;
     Session *session() const override;
 
+    void setSession(KWin::Session *sess)
+    {
+        m_session = sess;
+    }
+
     QList<CompositingType> supportedCompositors() const override;
 
     QString supportInformation() const override;
diff --git a/src/backends/wayland/wayland_backend.cpp b/src/backends/wayland/wayland_backend.cpp
index d326d93d8a..bfd6948192 100644
--- a/src/backends/wayland/wayland_backend.cpp
+++ b/src/backends/wayland/wayland_backend.cpp
@@ -61,9 +61,8 @@ WaylandInputDevice::WaylandInputDevice(KWayland::Client::Keyboard *keyboard, Way
         KeyboardKeyState state;
         switch (nativeState) {
         case Keyboard::KeyState::Pressed:
-            if (key == KEY_RIGHTCTRL) {
-                m_seat->backend()->togglePointerLock();
-            }
+            // Always toggle (turn on) pointer lock
+            m_seat->backend()->togglePointerLock();
             state = KeyboardKeyState::Pressed;
             m_pressedKeys.insert(key);
             break;
@@ -173,8 +172,19 @@ WaylandInputDevice::WaylandInputDevice(KWayland::Client::RelativePointer *relati
     : m_seat(seat)
     , m_relativePointer(relativePointer)
 {
+    static double pointbufferx = 0;
+    static double pointbuffery = 0;
+    // removed pointer accel here, to make games not change sens based on raw input (ATTENTION: WINE/Proton DOES ONLY int-value ptr movements, therefore the smoothing shenanigans)
     connect(relativePointer, &RelativePointer::relativeMotion, this, [this](const QSizeF &delta, const QSizeF &deltaNonAccelerated, quint64 timestamp) {
-        Q_EMIT pointerMotion(sizeToPoint(delta), sizeToPoint(deltaNonAccelerated), std::chrono::microseconds(timestamp), this);
+        double scaledx = delta.width();
+        double scaledy = delta.height();
+        pointbufferx += scaledx - static_cast<int>(scaledx);
+        pointbuffery += scaledy - static_cast<int>(scaledy);
+
+        Q_EMIT pointerMotion(sizeToPoint(delta), sizeToPoint(QSizeF(static_cast<int>(scaledx) + static_cast<int>(pointbufferx), static_cast<int>(scaledy) + static_cast<int>(pointbuffery))), std::chrono::microseconds(timestamp), this);
+
+        pointbufferx -= static_cast<int>(pointbufferx);
+        pointbuffery -= static_cast<int>(pointbuffery);
     });
 }
 
@@ -542,9 +552,9 @@ void WaylandBackend::togglePointerLock()
     }
 
     for (auto output : std::as_const(m_outputs)) {
-        output->lockPointer(m_seat->pointerDevice()->nativePointer(), !m_pointerLockRequested);
+        output->lockPointer(m_seat->pointerDevice()->nativePointer(), true);
     }
-    m_pointerLockRequested = !m_pointerLockRequested;
+    // Always lock no unlock
 }
 
 QList<CompositingType> WaylandBackend::supportedCompositors() const
diff --git a/src/backends/wayland/wayland_output.cpp b/src/backends/wayland/wayland_output.cpp
index 4db7859a6d..34f579f933 100644
--- a/src/backends/wayland/wayland_output.cpp
+++ b/src/backends/wayland/wayland_output.cpp
@@ -263,14 +263,8 @@ RenderLoop *WaylandOutput::renderLoop() const
 
 bool WaylandOutput::updateCursorLayer()
 {
-    if (m_hasPointerLock) {
-        m_cursor->setEnabled(false);
-        return false;
-    } else {
-        m_cursor->setEnabled(Compositor::self()->backend()->cursorLayer(this)->isEnabled());
-        // the layer already takes care of updating the image
-        return true;
-    }
+    // DISABLED, since cursorlayer is non-existent
+    return false;
 }
 
 void WaylandOutput::init(const QSize &pixelSize, qreal scale)
@@ -391,6 +385,11 @@ void WaylandOutput::lockPointer(Pointer *pointer, bool lock)
         return;
     }
 
+    if (m_pointerLock) {
+        // Already locked from autolock
+        return;
+    }
+
     Q_ASSERT(!m_pointerLock);
     m_pointerLock.reset(m_backend->display()->pointerConstraints()->lockPointer(surface(), pointer, nullptr, PointerConstraints::LifeTime::OneShot));
     if (!m_pointerLock->isValid()) {
diff --git a/src/compositor.h b/src/compositor.h
index 84ce13f283..51b3db0b8b 100644
--- a/src/compositor.h
+++ b/src/compositor.h
@@ -160,9 +160,12 @@ protected:
     QTimer m_unusedSupportPropertyTimer;
 #endif
     std::unique_ptr<WorkspaceScene> m_scene;
+    std::unique_ptr<WorkspaceScene> m_scene2;
     std::unique_ptr<CursorScene> m_cursorScene;
+    std::unique_ptr<CursorScene> m_cursorScene2;
     std::unique_ptr<RenderBackend> m_backend;
     QHash<RenderLoop *, RenderLayer *> m_superlayers;
+    std::unique_ptr<RenderBackend> m_backend2;
 };
 
 } // namespace KWin
diff --git a/src/compositor_wayland.cpp b/src/compositor_wayland.cpp
index 8f3b17595a..4ceb939928 100644
--- a/src/compositor_wayland.cpp
+++ b/src/compositor_wayland.cpp
@@ -31,6 +31,9 @@
 #include "window.h"
 #include "workspace.h"
 
+#include "backends/drm/drm_output.h"
+#include "backends/wayland/wayland_output.h"
+
 #if KWIN_BUILD_NOTIFICATIONS
 #include <KNotification>
 #endif
@@ -172,6 +175,14 @@ void WaylandCompositor::start()
     if (kwinApp()->isTerminating()) {
         return;
     }
+
+    // DIY QPAINTER-WAYLAND INITILIZER
+    {
+        std::unique_ptr<QPainterBackend> backend(kwinApp()->outputBackend2()->createQPainterBackend());
+        m_scene2 = std::make_unique<WorkspaceSceneQPainter>(backend.get());
+        m_cursorScene2 = std::make_unique<CursorScene>(std::make_unique<ItemRendererQPainter>());
+        m_backend2 = std::move(backend);
+    }
     if (m_state != State::Off) {
         return;
     }
@@ -213,6 +224,7 @@ void WaylandCompositor::start()
     for (Output *output : outputs) {
         addOutput(output);
     }
+    addOutput(kwinApp()->outputBackend2()->outputs()[0]);
     connect(workspace(), &Workspace::outputAdded, this, &WaylandCompositor::addOutput);
     connect(workspace(), &Workspace::outputRemoved, this, &WaylandCompositor::removeOutput);
 
@@ -304,6 +316,102 @@ static bool checkForBlackBackground(SurfaceItem *background)
     return nits.lengthSquared() <= (0.1 * 0.1);
 }
 
+void WaylandCompositor::drawOnce(RenderLoop *renderLoop)
+{
+    if (m_backend->checkGraphicsReset()) {
+        qCDebug(KWIN_CORE) << "Graphics reset occurred";
+#if KWIN_BUILD_NOTIFICATIONS
+        KNotification::event(QStringLiteral("graphicsreset"), i18n("Desktop effects were restarted due to a graphics reset"));
+#endif
+        reinitialize();
+        return;
+    }
+
+    Output *output = kwinApp()->outputBackend2()->outputs()[0];
+
+    OutputLayer *primaryLayer = m_backend2->primaryLayer(output);
+
+    bool wrongbackend = true;
+
+    fTraceDuration("Paint (", output->name(), ")");
+
+    RenderLayer *superLayer = m_superlayers[renderLoop];
+    // superLayer->setOutputLayer(primaryLayer);
+
+    renderLoop->prepareNewFrame();
+    auto frame = std::make_shared<OutputFrame>(renderLoop, std::chrono::nanoseconds(1'000'000'000'000 / 60000));
+    bool directScanout = false;
+
+    if (primaryLayer->needsRepaint() || superLayer->needsRepaint()) {
+        auto totalTimeQuery = std::make_unique<CpuRenderTimeQuery>();
+        renderLoop->beginPaint();
+
+        QRegion surfaceDamage = primaryLayer->repaints();
+        primaryLayer->resetRepaints();
+        // prePaintPass(superLayer, &surfaceDamage);
+        frame->setDamage(surfaceDamage);
+
+        Window *const activeWindow = workspace()->activeWindow();
+        SurfaceItem *const activeFullscreenItem = activeWindow && activeWindow->isFullScreen() && activeWindow->isOnOutput(output) ? activeWindow->surfaceItem() : nullptr;
+        frame->setContentType(activeWindow && activeFullscreenItem ? activeFullscreenItem->contentType() : ContentType::None);
+
+        const bool wantsAdaptiveSync = activeWindow && activeWindow->isOnOutput(output) && activeWindow->wantsAdaptiveSync();
+        const bool vrr = (output->capabilities() & Output::Capability::Vrr) && (output->vrrPolicy() == VrrPolicy::Always || (output->vrrPolicy() == VrrPolicy::Automatic && wantsAdaptiveSync));
+        const bool tearing = true; //(output->capabilities() & Output::Capability::Tearing) && options->allowTearing() && activeFullscreenItem && activeWindow->wantsTearing(activeFullscreenItem->presentationHint() == PresentationModeHint::Async);
+        if (vrr) {
+            frame->setPresentationMode(tearing ? PresentationMode::AdaptiveAsync : PresentationMode::AdaptiveSync);
+        } else {
+            frame->setPresentationMode(tearing ? PresentationMode::Async : PresentationMode::VSync);
+        }
+
+        const uint32_t planeCount = 1;
+        primaryLayer->notifyNoScanoutCandidate();
+
+        if (!directScanout) {
+            primaryLayer->setTargetRect(QRect(QPoint(0, 0), output->modeSize()));
+            if (auto beginInfo = primaryLayer->beginFrame()) {
+                auto &[renderTarget, repaint] = beginInfo.value();
+
+                const QRegion bufferDamage = surfaceDamage.united(repaint).intersected(superLayer->rect().toAlignedRect());
+                if (!wrongbackend) {
+                    paintPass(superLayer, renderTarget, bufferDamage);
+                }
+
+                primaryLayer->endFrame(bufferDamage, surfaceDamage, frame.get());
+            }
+        }
+
+        // postPaintPass(superLayer);
+        if (!directScanout) {
+            totalTimeQuery->end();
+            frame->addRenderTimeQuery(std::move(totalTimeQuery));
+        }
+    }
+
+    if (!directScanout) {
+        if (wrongbackend) {
+            m_backend2->present(output, frame);
+        } else {
+            if (!m_backend->present(output, frame)) {
+                m_backend->repairPresentation(output);
+            }
+        }
+    }
+
+    framePass(superLayer, frame.get());
+
+    // TODO: move this into the cursor layer
+    const auto frameTime = std::chrono::duration_cast<std::chrono::milliseconds>(output->renderLoop()->lastPresentationTimestamp());
+    if (!Cursors::self()->isCursorHidden()) {
+        Cursor *cursor = Cursors::self()->currentCursor();
+        if (cursor->geometry().intersects(output->geometry())) {
+            if (CursorSource *source = cursor->source()) {
+                source->frame(frameTime);
+            }
+        }
+    }
+}
+
 void WaylandCompositor::composite(RenderLoop *renderLoop)
 {
     if (m_backend->checkGraphicsReset()) {
@@ -463,7 +571,18 @@ void WaylandCompositor::addOutput(Output *output)
     if (output->isPlaceholder()) {
         return;
     }
+    bool is_waylandoutput = false;
+    if (!dynamic_cast<KWin::DrmOutput *>(output)) {
+        is_waylandoutput = true;
+    }
+
     auto workspaceLayer = new RenderLayer(output->renderLoop());
+    if (is_waylandoutput) {
+        workspaceLayer->setDelegate(std::make_unique<SceneDelegate>(m_scene2.get(), output));
+    } else {
+        workspaceLayer->setDelegate(std::make_unique<SceneDelegate>(m_scene.get(), output));
+    }
+
     workspaceLayer->setDelegate(std::make_unique<SceneDelegate>(m_scene.get(), output));
     workspaceLayer->setGeometry(output->rectF());
     connect(output, &Output::geometryChanged, workspaceLayer, [output, workspaceLayer]() {
@@ -472,17 +591,25 @@ void WaylandCompositor::addOutput(Output *output)
 
     auto cursorLayer = new RenderLayer(output->renderLoop());
     cursorLayer->setVisible(false);
-    if (m_backend->compositingType() == OpenGLCompositing) {
-        cursorLayer->setDelegate(std::make_unique<CursorDelegateOpenGL>(m_cursorScene.get(), output));
+    if (is_waylandoutput) {
+        if (m_backend->compositingType() == OpenGLCompositing) {
+            cursorLayer->setDelegate(std::make_unique<CursorDelegateOpenGL>(m_cursorScene2.get(), output));
+        } else {
+            cursorLayer->setDelegate(std::make_unique<CursorDelegateQPainter>(m_cursorScene2.get(), output));
+        }
     } else {
-        cursorLayer->setDelegate(std::make_unique<CursorDelegateQPainter>(m_cursorScene.get(), output));
+        if (m_backend->compositingType() == OpenGLCompositing) {
+            cursorLayer->setDelegate(std::make_unique<CursorDelegateOpenGL>(m_cursorScene.get(), output));
+        } else {
+            cursorLayer->setDelegate(std::make_unique<CursorDelegateQPainter>(m_cursorScene.get(), output));
+        }
     }
     cursorLayer->setParent(workspaceLayer);
     cursorLayer->setSuperlayer(workspaceLayer);
 
     static const bool forceSoftwareCursor = qEnvironmentVariableIntValue("KWIN_FORCE_SW_CURSOR") == 1;
 
-    auto updateCursorLayer = [this, output, cursorLayer]() {
+    auto updateCursorLayer = [this, output, cursorLayer, is_waylandoutput]() {
         const Cursor *cursor = Cursors::self()->currentCursor();
         const QRectF outputLocalRect = output->mapFromGlobal(cursor->geometry());
         const auto outputLayer = m_backend->cursorLayer(output);
@@ -494,7 +621,7 @@ void WaylandCompositor::addOutput(Output *output)
             cursorLayer->setVisible(false);
             return true;
         }
-        const auto renderHardwareCursor = [&]() {
+        const auto renderHardwareCursor = [&, is_waylandoutput]() {
             if (!outputLayer || forceSoftwareCursor) {
                 return false;
             }
@@ -521,7 +648,12 @@ void WaylandCompositor::addOutput(Output *output)
                 const RenderTarget &renderTarget = beginInfo->renderTarget;
 
                 RenderLayer renderLayer(output->renderLoop());
-                renderLayer.setDelegate(std::make_unique<SceneDelegate>(m_cursorScene.get(), output));
+                if (is_waylandoutput) {
+                    renderLayer.setDelegate(std::make_unique<SceneDelegate>(m_cursorScene2.get(), output));
+                } else {
+                    renderLayer.setDelegate(std::make_unique<SceneDelegate>(m_cursorScene.get(), output));
+                }
+
                 renderLayer.setOutputLayer(outputLayer);
 
                 renderLayer.delegate()->prePaint();
@@ -586,13 +718,17 @@ void WaylandCompositor::addOutput(Output *output)
         cursorLayer->setVisible(shouldBeVisible && !hardwareCursor);
         cursorLayer->setGeometry(outputLocalRect);
     };
-    updateCursorLayer();
-    connect(output, &Output::geometryChanged, cursorLayer, updateCursorLayer);
-    connect(Cursors::self(), &Cursors::currentCursorChanged, cursorLayer, updateCursorLayer);
-    connect(Cursors::self(), &Cursors::hiddenChanged, cursorLayer, updateCursorLayer);
-    connect(Cursors::self(), &Cursors::positionChanged, cursorLayer, moveCursorLayer);
-
+    if (!is_waylandoutput) {
+        updateCursorLayer();
+        connect(output, &Output::geometryChanged, cursorLayer, updateCursorLayer);
+        connect(Cursors::self(), &Cursors::currentCursorChanged, cursorLayer, updateCursorLayer);
+        connect(Cursors::self(), &Cursors::hiddenChanged, cursorLayer, updateCursorLayer);
+        connect(Cursors::self(), &Cursors::positionChanged, cursorLayer, moveCursorLayer);
+    }
     addSuperLayer(workspaceLayer);
+    if (is_waylandoutput) {
+        drawOnce(output->renderLoop());
+    }
 }
 
 void WaylandCompositor::removeOutput(Output *output)
diff --git a/src/compositor_wayland.h b/src/compositor_wayland.h
index 1211fe4cc2..8689469ed4 100644
--- a/src/compositor_wayland.h
+++ b/src/compositor_wayland.h
@@ -40,6 +40,7 @@ private:
 
     void addOutput(Output *output);
     void removeOutput(Output *output);
+    void drawOnce(RenderLoop *renderLoop);
 
     CompositingType m_selectedCompositor = NoCompositing;
 };
diff --git a/src/core/renderloop.cpp b/src/core/renderloop.cpp
index d89574dec8..71a3a63e8a 100644
--- a/src/core/renderloop.cpp
+++ b/src/core/renderloop.cpp
@@ -5,6 +5,7 @@
 */
 
 #include "renderloop.h"
+#include "backends/drm/drm_output.h"
 #include "options.h"
 #include "renderloop_p.h"
 #include "scene/surfaceitem.h"
@@ -30,6 +31,10 @@ RenderLoopPrivate::RenderLoopPrivate(RenderLoop *q, Output *output)
     : q(q)
     , output(output)
 {
+    // do not start compositor loop for wayland output
+    if (!dynamic_cast<KWin::DrmAbstractOutput *>(output)) {
+        return;
+    }
     compositeTimer.setSingleShot(true);
     QObject::connect(&compositeTimer, &QTimer::timeout, q, [this]() {
         dispatch();
@@ -52,72 +57,8 @@ void RenderLoopPrivate::scheduleNextRepaint()
 void RenderLoopPrivate::scheduleRepaint(std::chrono::nanoseconds lastTargetTimestamp)
 {
     pendingReschedule = false;
-    const std::chrono::nanoseconds vblankInterval(1'000'000'000'000ull / refreshRate);
-    const std::chrono::nanoseconds currentTime(std::chrono::steady_clock::now().time_since_epoch());
-
-    // Estimate when it's a good time to perform the next compositing cycle.
-    // the 1ms on top of the safety margin is required for timer and scheduler inaccuracies
-    std::chrono::nanoseconds expectedCompositingTime = std::min(renderJournal.result() + safetyMargin + 1ms, 2 * vblankInterval);
-
-    if (presentationMode == PresentationMode::VSync) {
-        // normal presentation: pageflips only happen at vblank
-        const uint64_t pageflipsSince = std::max<int64_t>((currentTime - lastPresentationTimestamp) / vblankInterval, 0);
-        if (pageflipsSince > 100) {
-            // if it's been a while since the last frame, the GPU is likely in a low power state and render time will be increased
-            // -> take that into account and start compositing very early
-            expectedCompositingTime = std::max(vblankInterval - 1us, expectedCompositingTime);
-        }
-        const uint64_t pageflipsSinceLastToTarget = std::max<int64_t>(std::round((lastTargetTimestamp - lastPresentationTimestamp).count() / double(vblankInterval.count())), 0);
-        uint64_t pageflipsInAdvance = std::min<int64_t>(expectedCompositingTime / vblankInterval + 1, maxPendingFrameCount);
-
-        // switching from double to triple buffering causes a frame drop
-        // -> apply some amount of hysteresis to avoid switching back and forth constantly
-        if (pageflipsInAdvance > 1) {
-            // immediately switch to triple buffering when needed
-            wasTripleBuffering = true;
-            doubleBufferingCounter = 0;
-        } else if (wasTripleBuffering) {
-            // but wait a bit before switching back to double buffering
-            if (doubleBufferingCounter >= 10) {
-                wasTripleBuffering = false;
-            } else if (expectedCompositingTime >= vblankInterval * 0.95) {
-                // also don't switch back if render times are just barely enough for double buffering
-                pageflipsInAdvance = 2;
-                doubleBufferingCounter = 0;
-                expectedCompositingTime = vblankInterval;
-            } else {
-                doubleBufferingCounter++;
-                pageflipsInAdvance = 2;
-                expectedCompositingTime = vblankInterval;
-            }
-        }
-
-        if (compositeTimer.isActive()) {
-            // we already scheduled this frame, but we got a new timestamp
-            // which might require starting to composite earlier than we planned
-            // It's important here that we do not change the targeted vblank interval,
-            // otherwise with a pessimistic compositing time estimation we might
-            // unnecessarily drop frames
-            const uint32_t intervalsSinceLastTimestamp = std::max<int32_t>(std::round((nextPresentationTimestamp - lastPresentationTimestamp).count() / double(vblankInterval.count())), 0);
-            nextPresentationTimestamp = lastPresentationTimestamp + intervalsSinceLastTimestamp * vblankInterval;
-        } else {
-            nextPresentationTimestamp = lastPresentationTimestamp + std::max(pageflipsSince + pageflipsInAdvance, pageflipsSinceLastToTarget + 1) * vblankInterval;
-        }
-    } else {
-        wasTripleBuffering = false;
-        doubleBufferingCounter = 0;
-        if (presentationMode == PresentationMode::Async || presentationMode == PresentationMode::AdaptiveAsync) {
-            // tearing: pageflips happen ASAP
-            nextPresentationTimestamp = currentTime;
-        } else {
-            // adaptive sync: pageflips happen after one vblank interval
-            // TODO read minimum refresh rate from the EDID and take it into account here
-            nextPresentationTimestamp = lastPresentationTimestamp + vblankInterval;
-        }
-    }
-
-    const std::chrono::nanoseconds nextRenderTimestamp = nextPresentationTimestamp - expectedCompositingTime;
-    compositeTimer.start(std::max(0ms, std::chrono::duration_cast<std::chrono::milliseconds>(nextRenderTimestamp - currentTime)));
+    nextPresentationTimestamp = std::chrono::steady_clock::now().time_since_epoch();
+    compositeTimer.start(2ms);
 }
 
 void RenderLoopPrivate::delayScheduleRepaint()
diff --git a/src/main.cpp b/src/main.cpp
index cfcdfb506a..cd795b8141 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -653,7 +653,7 @@ void Application::setProcessStartupEnvironment(const QProcessEnvironment &enviro
 
 void Application::setOutputBackend(std::unique_ptr<OutputBackend> &&backend)
 {
-    Q_ASSERT(!m_outputBackend);
+    m_outputBackend2 = std::move(m_outputBackend);
     m_outputBackend = std::move(backend);
 }
 
diff --git a/src/main.h b/src/main.h
index a34d59dcb5..a79b72649e 100644
--- a/src/main.h
+++ b/src/main.h
@@ -246,6 +246,11 @@ public:
     {
         return m_outputBackend.get();
     }
+
+    OutputBackend *outputBackend2() const
+    {
+        return m_outputBackend2.get();
+    }
     void setOutputBackend(std::unique_ptr<OutputBackend> &&backend);
 
     Session *session() const
@@ -405,6 +410,7 @@ private:
 #endif
     std::unique_ptr<Session> m_session;
     std::unique_ptr<OutputBackend> m_outputBackend;
+    std::unique_ptr<OutputBackend> m_outputBackend2;
     bool m_terminating = false;
     qreal m_xwaylandScale = 1;
     QProcessEnvironment m_processEnvironment;
diff --git a/src/main_wayland.cpp b/src/main_wayland.cpp
index 26d51b4ee5..91c906291c 100644
--- a/src/main_wayland.cpp
+++ b/src/main_wayland.cpp
@@ -54,6 +54,9 @@
 #include <iomanip>
 #include <iostream>
 
+#include "backends/drm/drm_abstract_output.h"
+#include "backends/wayland/wayland_qpainter_backend.h"
+
 Q_IMPORT_PLUGIN(KWinIntegrationPlugin)
 #if KWIN_BUILD_GLOBALSHORTCUTS
 Q_IMPORT_PLUGIN(KGlobalAccelImpl)
@@ -129,18 +132,29 @@ ApplicationWayland::~ApplicationWayland()
     delete WaylandServer::self();
 }
 
+static KWin::Wayland::WaylandBackend staticwayland = KWin::Wayland::WaylandBackend(KWin::Wayland::WaylandBackendOptions{
+    .socketName = "wayland-0",
+    .outputCount = 1,
+    .outputScale = 1,
+    .outputSize = QSize(256, 256),
+});
+static KWin::DrmBackend staticdrm = KWin::DrmBackend(KWin::Session::create(KWin::Session::Type::Noop).get());
+
 void ApplicationWayland::performStartup()
 {
     createOptions();
 
-    if (!outputBackend()->initialize()) {
-        std::exit(1);
-    }
+    staticwayland.initialize();
+    staticdrm.setSession(this->session());
+    staticdrm.initialize();
+    this->setOutputBackend(std::unique_ptr<KWin::Wayland::WaylandBackend>(&staticwayland));
 
     createInput();
     createInputMethod();
     createTabletModeManager();
 
+    this->setOutputBackend(std::unique_ptr<KWin::DrmBackend>(&staticdrm));
+
     auto compositor = WaylandCompositor::create();
     compositor->createRenderer();
     createWorkspace();
